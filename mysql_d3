#!/bin/bash

# ==========================
# Import functions
source `which mysql_d3_librc`

avaliable_commands_list='run-cli suffix-list suffix-set suffix-check suffix-clear dump-solid dump-all dump-data dump-schema restore-solid restore-all restore-data restore-schema restore-one drop-db truncate-db truncate-table info-check info-credentials info-structure init-credentials'
function usage {
    echo
    echo 'Modify data in database'
    echo 'Import data from database__table--type.sql file , wo output'
    echo 'Export data to database__table--type.sql file , wo output'
    echo
    echo usage:
    echo '    '$cmd help;
    echo '    '$cmd all\|solid DATABASE;
    echo '    '$cmd data\|schema DATABASE [TABLE];
    echo example:
    echo '    '$cmd data mysql Users
    echo '    '$cmd schema mysql Users
    echo '    '$cmd all wpb
    echo '    '$cmd truncate wpb
    echo
}

checkout_command

# show_help $commandlet
if test $commandlet == 'help'; then
    usage
    exit;
fi

if test $commandlet == 'test'; then
    echo cmd \: $cmd
    echo commandlet \: $commandlet
    echo suffix \: $mysql_group_suffix
    echo user \: $user
    echo database \: $DB
    echo
    exit;
fi

if test $commandlet == 'run-cli'; then
    $cmd_mysql
    exit;
fi

if test $commandlet == 'suffix-list'; then
    cat $fileconfig | grep -e "\[client.*\]" | sed -e "s/^\[client/-/" -e "s/\]//"
    exit;
fi

if test $commandlet == 'suffix-set'; then
    echo export mysql_group_suffix=$2
    exit;
fi

if test $commandlet == 'suffix-check'; then
    if [ -z "$mysql_group_suffix" ]; then
        echo no suffix set
    else
        echo current suffix \: $mysql_group_suffix
    fi
    exit;
fi

if test $commandlet == 'suffix-unset'; then
    echo unset mysql_group_suffix
    exit;
fi

if test $commandlet == 'suffix-clear'; then
    echo unset mysql_group_suffix
    exit;
fi

if test $commandlet == 'dump-solid'; then
    checkout_database
    commandlet_dump_solid
    exit;
fi

if test $commandlet == 'dump-all'; then
    checkout_database

    if [ -z "$2" ]; then
        if [ ! -d $dumpcontainer ]; then
            mkdir $dumpcontainer
        fi
        folder=`date '+%Y%m%d-%H%M%S'`
        mkdir $dumpcontainer/$folder
        cd $dumpcontainer/$folder
    else
        if [ -d $2 ]; then
            cd $2
        else
            show_error 'not folder' $2
            exit;
        fi
    fi

    for i in $( mysql_lambdaquery_showtables ); do
        # echo "table: " $i
        # echo -en "\t"
        commandlet_dump_schema $i
        # echo -en "\t"
        commandlet_dump_data $i
        # echo
    done

    # commandlet_dump_solid

    commandlet_info_structure_print > structure.txt

    cd $oldpwd
    echo
    exit;
fi

if test $commandlet == 'dump-data'; then
    checkout_database
    checkout_table $2
    commandlet_dump_data $2
    echo
    exit;
fi

if test $commandlet == 'dump-schema'; then
    checkout_database
    checkout_table $2
    commandlet_dump_schema $2
    echo
    exit;
fi

if test $commandlet == 'restore-solid'; then
    checkout_database
    commandlet_restore_solid
    exit;
fi

if test $commandlet == 'restore-one'; then
    checkout_database
    checkout_file $2
    commandlet_restore_onefile $2
    exit;
fi

if test $commandlet == 'restore-all'; then
    checkout_database
    checkout_folder $2
    cd $2
    echo
    commandlet_drop_all_tables
    echo
    for f in $( ls -1 $DB__*--schema.sql ); do
        # extract table name
        f=${f%--schema.sql}
        f=${f#$DB\_\_}
        commandlet_restore_schema $f
    done
    echo
    for f in $( ls -1 $DB__*--data.sql ); do
        # extract table name
        f=${f%--data.sql}
        f=${f#$DB\_\_}
        commandlet_restore_data $f
    done
    echo
    commandlet_info_structure_print
    cd $oldpwd
    exit;
fi

if test $commandlet == 'restore-data'; then
    checkout_database
    checkout_table $2
    commandlet_restore_data $2
    exit;
fi

if test $commandlet == 'restore-schema'; then
    checkout_database
    checkout_table $2
    commandlet_restore_schema $2
    exit;
fi

if test $commandlet == 'drop-db'; then
    checkout_database
    commandlet_drop_all_tables
    echo
    echo Tables were droped
    exit;
fi

if test $commandlet == 'drop-table'; then
    checkout_database
    checkout_table $2
    commandlet_drop_table $2
    exit;
fi

if test $commandlet == 'truncate-db'; then
    checkout_database
    for TABLE in $( mysql_lambdaquery_showtables ); do
        commandlet_truncate_table $TABLE
    done
    echo
    echo Tables were truncated
    exit;
fi

if test $commandlet == 'truncate-table'; then
    checkout_database
    checkout_table $2
    commandlet_truncate_table $2
    exit;
fi

if test $commandlet == 'info-check'; then
    checkout_connection out
    exit;
fi

if test $commandlet == 'info-credentials'; then
    to_mysqldb_query "SELECT Host,User,Password FROM user"
    to_mysqldb_query "SELECT Host,Db,User FROM db"
    to_mysqldb_query "SELECT * FROM servers"
    to_mysqldb_query "SELECT Host,Db FROM host"
    to_mysqldb_query "SELECT Host,Db,User,Table_name FROM tables_priv"
    exit;
fi

if test $commandlet == 'info-structure'; then
    checkout_database
    checkout_connection
    commandlet_info_structure_print
    exit;
fi

if test $commandlet == 'init-password'; then
    password=`commandlet_generate_password`
    echo 'generated :' $password
    exit;
fi

if test $commandlet == 'init-credentials'; then
    checkout_name $2
    commandlet_init_user_credentials
    exit;
fi

not_recognized $1
